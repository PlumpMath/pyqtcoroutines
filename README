People like to think synchronously. Computers must work asynchronously.

Impressed with David Beazley 'A Curious Course on Coroutines and Concurrency'
http://www.dabeaz.com/coroutines/, I implement PyQt4 based coroutines scheduler.

It's possible to write asynchronous code in the synchronous manner:

# this is 'coroutine'. Special function which called from scheduler.
def sqlInserter( aLotOfrecords ):
    try:
        for record in aLotOfrecords:
            # insert record to database
            ...
            # now let qt event loop to process pending event!
            yield
    except:
        # handle all exceptions!
        ...
        pass


s = Scheduler()
s.newTask( sqlInserter(records) )


In addition to David's subcoroutines and system call ideas,
I add 'yield Return(..)' pattern.


def subcoroutine():
    ...
    yield Return( myWork )


def task():
    value = yield subcoroutine()
    ...
