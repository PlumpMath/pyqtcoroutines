# People likes to think synchronously. Computers must work asynchronously. #

Impressed with excelent
David Beazley [python coroutines](http://www.dabeaz.com/coroutines/) course, 
I wrote PyQt4 based coroutines scheduler.

We could use python [yield](http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained) 
to build 'operating system' inside the python script.  
Use **yield** as execution trap, **res = yield SomeClass()** as system call.

Asynchronous code in the synchronous manner:

    from pyqtcoroutines import Scheduler

    def inserter( a_lot_of_records ):
        try:
            for record in a_lot_of_records:
                # do small piece of work here 
                ... insert record to the sql ...
    
                # This is execution trap!
                #
                # Unlike QCoreApplication.processEvents(),
                # we will NORMALLY return to the main qt event loop.
    
                yield
        except:
            # handle all exceptions in synchronous manner!
            ...
    
    
    # create scheduler
    s = Scheduler()

    # It's not the function call. 
    # We construct python Generator object.
    # Execution will start after the first 
    # coroutine.send( None ) call inside the Scheduler.
    coroutine = inserter( a_lot_of_records )

    # Create and start 'task' from coroutine.
    s.newTask( coroutine )


We could execute blocking calls asynchronously!
Just [inherit](http://github.com/ddosoff/pyqtcoroutines/blob/master/qtcoroutines.py#L61) from 
[pyqtcoroutines.SystemCall](http://github.com/ddosoff/pyqtcoroutines/blob/master/qtcoroutines.py#L51) class.

    def coroutine():
        print 'sleep 1 sec..'
        yield Sleep( 1000 )
        print 'hello'


In addition to subcoroutines and system call ideas,
I added 'yield Return(..)' pattern.


    def subcoroutine():
        ...
        yield Return( myWork )
    
    
    def task():
        value = yield subcoroutine()
        ...


Check out working example:

$ **python [./qtcoroutines.py](http://github.com/ddosoff/pyqtcoroutines/blob/master/qtcoroutines.py#L252)**
